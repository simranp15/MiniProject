//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Railway_Reservation
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MiniProjectTrainEntities : DbContext
    {
        public MiniProjectTrainEntities()
            : base("name=MiniProjectTrainEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Cancellation> Cancellations { get; set; }
        public virtual DbSet<TicketClassDetail> TicketClassDetails { get; set; }
        public virtual DbSet<Train> Trains { get; set; }
    
        public virtual int AddTicketClassDetail(Nullable<int> trainNo, string className, Nullable<int> totalSeats, Nullable<int> availableSeats, Nullable<decimal> fare)
        {
            var trainNoParameter = trainNo.HasValue ?
                new ObjectParameter("TrainNo", trainNo) :
                new ObjectParameter("TrainNo", typeof(int));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var totalSeatsParameter = totalSeats.HasValue ?
                new ObjectParameter("TotalSeats", totalSeats) :
                new ObjectParameter("TotalSeats", typeof(int));
    
            var availableSeatsParameter = availableSeats.HasValue ?
                new ObjectParameter("AvailableSeats", availableSeats) :
                new ObjectParameter("AvailableSeats", typeof(int));
    
            var fareParameter = fare.HasValue ?
                new ObjectParameter("Fare", fare) :
                new ObjectParameter("Fare", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTicketClassDetail", trainNoParameter, classNameParameter, totalSeatsParameter, availableSeatsParameter, fareParameter);
        }
    
        public virtual int AddTrain(Nullable<int> trainNo, string trainName, string source, string destination)
        {
            var trainNoParameter = trainNo.HasValue ?
                new ObjectParameter("TrainNo", trainNo) :
                new ObjectParameter("TrainNo", typeof(int));
    
            var trainNameParameter = trainName != null ?
                new ObjectParameter("TrainName", trainName) :
                new ObjectParameter("TrainName", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTrain", trainNoParameter, trainNameParameter, sourceParameter, destinationParameter);
        }
    
        public virtual int BookTrainTicket(string passengerName, Nullable<int> trainNo, string className, Nullable<System.DateTime> dateOfTravel, Nullable<int> numberOfTickets)
        {
            var passengerNameParameter = passengerName != null ?
                new ObjectParameter("PassengerName", passengerName) :
                new ObjectParameter("PassengerName", typeof(string));
    
            var trainNoParameter = trainNo.HasValue ?
                new ObjectParameter("TrainNo", trainNo) :
                new ObjectParameter("TrainNo", typeof(int));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var dateOfTravelParameter = dateOfTravel.HasValue ?
                new ObjectParameter("DateOfTravel", dateOfTravel) :
                new ObjectParameter("DateOfTravel", typeof(System.DateTime));
    
            var numberOfTicketsParameter = numberOfTickets.HasValue ?
                new ObjectParameter("NumberOfTickets", numberOfTickets) :
                new ObjectParameter("NumberOfTickets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BookTrainTicket", passengerNameParameter, trainNoParameter, classNameParameter, dateOfTravelParameter, numberOfTicketsParameter);
        }
    
        public virtual int CancelTicket(Nullable<int> bookingId, string passengerName, Nullable<int> trainNo, string className, Nullable<int> numberOfTickets)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(int));
    
            var passengerNameParameter = passengerName != null ?
                new ObjectParameter("PassengerName", passengerName) :
                new ObjectParameter("PassengerName", typeof(string));
    
            var trainNoParameter = trainNo.HasValue ?
                new ObjectParameter("TrainNo", trainNo) :
                new ObjectParameter("TrainNo", typeof(int));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var numberOfTicketsParameter = numberOfTickets.HasValue ?
                new ObjectParameter("NumberOfTickets", numberOfTickets) :
                new ObjectParameter("NumberOfTickets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CancelTicket", bookingIdParameter, passengerNameParameter, trainNoParameter, classNameParameter, numberOfTicketsParameter);
        }
    
        public virtual ObjectResult<string> ToggleTrainStatus(Nullable<int> trainNo)
        {
            var trainNoParameter = trainNo.HasValue ?
                new ObjectParameter("TrainNo", trainNo) :
                new ObjectParameter("TrainNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ToggleTrainStatus", trainNoParameter);
        }
    }
}
